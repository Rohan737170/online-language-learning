import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.Map;
import java.util.Scanner;

public class LanguageLearningApp {

    // Mock user database (username -> password)
    private static final Map<String, String> userDatabase = new HashMap<>();
    
    // Mock user progress database (username -> score)
    private static final Map<String, Integer> progressDatabase = new HashMap<>();
    
    // Mock quiz data (category -> questions)
    private static final Map<String, String[][]> quizDatabase = new HashMap<>();

    public static void main(String[] args) {
        // Initialize mock users and quizzes
        initializeMockData();

        // Create scanner for user input
        Scanner scanner = new Scanner(System.in);

        // Show the login screen
        showLoginScreen(scanner);
    }

    // Initializes mock data for users and quizzes
    private static void initializeMockData() {
        userDatabase.put("learner1", "password123");
        userDatabase.put("teacher", "teach2023");

        quizDatabase.put("Basic", new String[][]{
            {"What is 'Hello' in French?", "Bonjour"},
            {"What is 'Goodbye' in German?", "Auf Wiedersehen"},
            {"What is 'Thank You' in Spanish?", "Gracias"}
        });

        quizDatabase.put("Intermediate", new String[][]{
            {"What is 'How are you?' in French?", "Comment ça va?"},
            {"What is 'Please' in German?", "Bitte"},
            {"What is 'Excuse me' in Spanish?", "Perdón"}
        });

        quizDatabase.put("Advanced", new String[][]{
            {"What is 'Good morning' in French?", "Bonjour"},
            {"What is 'What time is it?' in German?", "Wie spät ist es?"},
            {"What is 'I need help' in Spanish?", "Necesito ayuda"}
        });
    }

    // Displays the login screen and handles user login
    private static void showLoginScreen(Scanner scanner) {
        System.out.println("=== Welcome to Language Learning App ===");
        String username = getUsername(scanner);
        String password = getPassword(scanner);

        validateLogin(username, password, scanner);
    }

    // Prompts the user for a username and ensures it is not empty
    private static String getUsername(Scanner scanner) {
        String username;
        while (true) {
            System.out.print("Enter Username: ");
            username = scanner.nextLine().trim();
            if (!username.isEmpty()) {
                break;
            }
            System.out.println("Error: Username cannot be empty.");
        }
        return username;
    }

    // Prompts the user for a password and ensures it is not empty
    private static String getPassword(Scanner scanner) {
        String password;
        while (true) {
            System.out.print("Enter Password: ");
            password = scanner.nextLine().trim();
            if (!password.isEmpty()) {
                break;
            }
            System.out.println("Error: Password cannot be empty.");
        }
        return password;
    }

    // Validates the user's login credentials
    private static void validateLogin(String username, String password, Scanner scanner) {
        if (userDatabase.containsKey(username) && userDatabase.get(username).equals(password)) {
            System.out.println("Login Successful!");
            if (!progressDatabase.containsKey(username)) {
                progressDatabase.put(username, 0); // Initialize user progress
            }
            showDashboard(username, scanner);
        } else {
            System.out.println("Invalid credentials. Please try again.");
            showLoginScreen(scanner);
        }
    }

    // Displays the dashboard for the user after successful login
    private static void showDashboard(String username, Scanner scanner) {
        boolean validOptionSelected = false;

        while (!validOptionSelected) {
            System.out.println("\nWelcome " + username + "!");
            System.out.println("1. Start Quiz");
            System.out.println("2. View Progress");
            System.out.println("3. Logout");

            int choice = getMenuChoice(scanner);
            switch (choice) {
                case 1:
                    startQuiz(username, scanner);
                    validOptionSelected = true;
                    break;
                case 2:
                    viewProgress(username);
                    validOptionSelected = true;
                    break;
                case 3:
                    System.out.println("Logging out...");
                    showLoginScreen(scanner);
                    validOptionSelected = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    // Gets a valid menu choice from the user
    private static int getMenuChoice(Scanner scanner) {
        int choice = -1;
        while (true) {
            try {
                System.out.print("Choose an option: ");
                choice = scanner.nextInt();
                scanner.nextLine();  // Consume newline character
                if (choice < 1 || choice > 3) {
                    throw new IllegalArgumentException("Invalid choice. Please select a valid option.");
                }
                break;
            } catch (InputMismatchException e) {
                System.out.println("Error: Please enter a valid number.");
                scanner.nextLine(); // Consume invalid input
            } catch (IllegalArgumentException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
        return choice;
    }

    // Starts the quiz for the user, allowing difficulty selection
    private static void startQuiz(String username, Scanner scanner) {
        System.out.println("Choose Difficulty: ");
        System.out.println("1. Basic");
        System.out.println("2. Intermediate");
        System.out.println("3. Advanced");

        int choice = getDifficultyChoice(scanner);
        String difficulty = getDifficultyLevel(choice);

        if (quizDatabase.containsKey(difficulty)) {
            takeQuiz(username, difficulty, scanner);
        } else {
            System.out.println("Error: Invalid difficulty selected.");
            showDashboard(username, scanner);
        }
    }

    // Get difficulty choice from user
    private static int getDifficultyChoice(Scanner scanner) {
        int difficultyChoice = -1;
        while (true) {
            try {
                difficultyChoice = scanner.nextInt();
                scanner.nextLine();  // Consume newline character
                if (difficultyChoice < 1 || difficultyChoice > 3) {
                    throw new IllegalArgumentException("Please choose a valid difficulty level (1-3).");
                }
                break;
            } catch (InputMismatchException | IllegalArgumentException e) {
                System.out.println("Error: " + e.getMessage());
                scanner.nextLine(); // Consume invalid input
            }
        }
        return difficultyChoice;
    }

    // Get difficulty level as a string based on user's choice
    private static String getDifficultyLevel(int choice) {
        switch (choice) {
            case 1:
                return "Basic";
            case 2:
                return "Intermediate";
            case 3:
                return "Advanced";
            default:
                return "";
        }
    }

    // Quiz taking process (questions are displayed based on difficulty level)
    private static void takeQuiz(String username, String difficulty, Scanner scanner) {
        String[][] questions = quizDatabase.get(difficulty);
        int score = 0;

        for (int i = 0; i < questions.length; i++) {
            boolean validAnswer = false;
            while (!validAnswer) {
                System.out.println("\nQuestion " + (i + 1) + ": " + questions[i][0]);
                String userAnswer = getAnswer(scanner);
                validAnswer = validateAnswer(userAnswer, questions[i][1]);

                if (validAnswer) {
                    score++;
                } else {
                    System.out.println("Incorrect! The correct answer is: " + questions[i][1]);
                }
            }
        }

        // Save the user's progress after the quiz
        progressDatabase.put(username, score);
        System.out.println("\nYour Score: " + score + "/" + questions.length);
        giveFeedback(score, questions.length);
        showDashboard(username, scanner);
    }

    // Prompts the user for an answer to a quiz question
    private static String getAnswer(Scanner scanner) {
        String answer;
        while (true) {
            System.out.print("Your Answer: ");
            answer = scanner.nextLine().trim();
            if (!answer.isEmpty()) {
                break;
            }
            System.out.println("Error: Answer cannot be empty.");
        }
        return answer;
    }

    // Validates the user's answer to a quiz question
    private static boolean validateAnswer(String userAnswer, String correctAnswer) {
        return userAnswer.equalsIgnoreCase(correctAnswer);
    }

    // Gives feedback based on the user's performance
    private static void giveFeedback(int score, int totalQuestions) {
        if (score == totalQuestions) {
            System.out.println("Excellent! You answered all questions correctly!");
        } else if (score >= totalQuestions / 2) {
            System.out.println("Good job! Keep improving!");
        } else {
            System.out.println("You can do better! Keep practicing!");
        }
    }

    // Displays the user's progress
    private static void viewProgress(String username) {
        if (progressDatabase.containsKey(username)) {
            System.out.println("Your Progress: " + progressDatabase.get(username) + "/" + quizDatabase.size());
        } else {
            System.out.println("You haven't taken a quiz yet.");
        }
    }
}
