import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.Scanner;

public class LanguageLearningApp {

    // Mock user database
    private static final HashMap<String, String> userDatabase = new HashMap<>();
    private static final HashMap<String, Integer> progressDatabase = new HashMap<>();

    // Quiz questions and answers
    private static final String[][] quizQuestions = {
        {"What is 'Hello' in French?", "Bonjour"},
        {"What is 'Goodbye' in German?", "Auf Wiedersehen"},
        {"What is 'Thank You' in Spanish?", "Gracias"}
    };

    public static void main(String[] args) {
        // Initialize mock users
        initializeMockUsers();

        // Create a scanner object for user input
        Scanner scanner = new Scanner(System.in);

        // Show the login screen
        showLoginScreen(scanner);
    }

    // Initializes mock users in the user database
    private static void initializeMockUsers() {
        userDatabase.put("learner1", "password123");
        userDatabase.put("teacher", "teach2023");
    }

    // Displays the login screen and handles user login
    private static void showLoginScreen(Scanner scanner) {
        System.out.println("=== Welcome to Language Learning App ===");
        String username = getUsername(scanner);
        String password = getPassword(scanner);

        validateLogin(username, password);
    }

    // Prompts the user for a username and ensures it is not empty
    private static String getUsername(Scanner scanner) {
        String username;
        while (true) {
            System.out.print("Enter Username: ");
            username = scanner.nextLine().trim();
            if (!username.isEmpty()) {
                break;
            }
            System.out.println("Error: Username cannot be empty.");
        }
        return username;
    }

    // Prompts the user for a password and ensures it is not empty
    private static String getPassword(Scanner scanner) {
        String password;
        while (true) {
            System.out.print("Enter Password: ");
            password = scanner.nextLine().trim();
            if (!password.isEmpty()) {
                break;
            }
            System.out.println("Error: Password cannot be empty.");
        }
        return password;
    }

    // Validates the user's login credentials
    private static void validateLogin(String username, String password) {
        if (userDatabase.containsKey(username) && userDatabase.get(username).equals(password)) {
            System.out.println("Login Successful!");
            if (!progressDatabase.containsKey(username)) {
                progressDatabase.put(username, 0); // Initialize user progress
            }
            showDashboard(username);
        } else {
            System.out.println("Invalid credentials. Please try again.");
            // Retry login if invalid credentials
            showLoginScreen(new Scanner(System.in));
        }
    }

    // Displays the dashboard for the user after successful login
    private static void showDashboard(String username) {
        Scanner scanner = new Scanner(System.in);
        boolean validOptionSelected = false;

        while (!validOptionSelected) {
            System.out.println("\nWelcome " + username + "!");
            System.out.println("1. Start Quiz");
            System.out.println("2. View Progress");
            System.out.println("3. Logout");

            int choice = getMenuChoice(scanner);
            switch (choice) {
                case 1:
                    startQuiz(username);
                    validOptionSelected = true;
                    break;
                case 2:
                    viewProgress(username);
                    validOptionSelected = true;
                    break;
                case 3:
                    System.out.println("Logging out...");
                    showLoginScreen(scanner);
                    validOptionSelected = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    // Gets a valid menu choice from the user
    private static int getMenuChoice(Scanner scanner) {
        int choice = -1;
        while (true) {
            try {
                System.out.print("Choose an option: ");
                choice = scanner.nextInt();
                scanner.nextLine();  // Consume newline character
                if (choice < 1 || choice > 3) {
                    throw new IllegalArgumentException("Invalid choice. Please select a valid option.");
                }
                break;
            } catch (InputMismatchException e) {
                System.out.println("Error: Please enter a valid number.");
                scanner.nextLine(); // Consume invalid input
            } catch (IllegalArgumentException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
        return choice;
    }

    // Starts the quiz for the user
    private static void startQuiz(String username) {
        Scanner scanner = new Scanner(System.in);
        int score = 0;

        // Loop through the quiz questions
        for (int i = 0; i < quizQuestions.length; i++) {
            boolean validAnswer = false;
            while (!validAnswer) {
                System.out.println("\nQuestion " + (i + 1) + ": " + quizQuestions[i][0]);
                String userAnswer = getAnswer(scanner);
                validAnswer = validateAnswer(userAnswer, quizQuestions[i][1]);

                if (validAnswer) {
                    score++;
                } else {
                    System.out.println("Incorrect! The correct answer is: " + quizQuestions[i][1]);
                }
            }
        }

        // Save the user's progress after the quiz
        progressDatabase.put(username, score);
        System.out.println("\nYour Score: " + score + "/" + quizQuestions.length);
        showDashboard(username);
    }

    // Prompts the user for an answer to a quiz question
    private static String getAnswer(Scanner scanner) {
        String answer;
        while (true) {
            System.out.print("Your Answer: ");
            answer = scanner.nextLine().trim();
            if (!answer.isEmpty()) {
                break;
            }
            System.out.println("Error: Answer cannot be empty.");
        }
        return answer;
    }

    // Validates the user's answer to a quiz question
    private static boolean validateAnswer(String userAnswer, String correctAnswer) {
        return userAnswer.equalsIgnoreCase(correctAnswer);
    }

    // Displays the user's progress
    private static void viewProgress(String username) {
        if (progressDatabase.containsKey(username)) {
            System.out.println("Your Progress: " + progressDatabase.get(username) + "/" + quizQuestions.length);
        } else {
            System.out.println("You haven't taken a quiz yet.");
        }
        showDashboard(username);
    }
}
